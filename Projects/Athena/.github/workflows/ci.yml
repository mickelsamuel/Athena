name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "1.8.3"

jobs:
  # Code Quality Checks
  lint-and-format:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Run ruff linting
        run: poetry run ruff check athena tests

      - name: Run ruff formatting check
        run: poetry run ruff format --check athena tests

      - name: Run mypy type checking
        run: poetry run mypy athena --ignore-missing-imports

  # Unit Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Run tests
        run: poetry run pytest tests/ -v --cov=athena --cov-report=xml --cov-report=term

      - name: Upload coverage reports
        if: matrix.python-version == '3.12'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run safety check
        run: poetry run safety check

      - name: Run bandit security linter
        run: poetry run bandit -r athena/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload bandit report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json

  # Docker Build Tests
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build app image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.app
          push: false
          tags: athena-app:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build dashboard image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.dashboard
          push: false
          tags: athena-dashboard:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test docker-compose
        run: |
          docker compose config
          echo "✅ docker-compose.yml is valid"

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run integration tests
        run: poetry run pytest tests/test_integration.py -v

      - name: Test CLI commands
        run: |
          poetry run python -m athena.cli.main --help
          poetry run python -m athena.cli.main version
          echo "✅ CLI commands working"

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run performance benchmarks
        run: |
          # Quick performance test
          time poetry run python -c "
          from athena.data.yahoo import YahooDataAdapter
          from athena.strategies.sma_crossover import SMACrossoverStrategy
          from athena.backtest.engine import BacktestEngine
          import time

          start_time = time.time()
          provider = YahooDataAdapter()
          data = provider.fetch('SPY', '2023-01-01', '2023-12-31')
          strategy = SMACrossoverStrategy(fast_period=10, slow_period=20)
          engine = BacktestEngine(initial_capital=100000)
          result = engine.run(strategy, data, 'SPY')
          end_time = time.time()

          print(f'✅ Backtest completed in {end_time - start_time:.2f} seconds')
          print(f'✅ Final capital: \${result.final_capital:,.2f}')
          print(f'✅ Total return: {result.total_return:.2%}')
          "

  # Documentation Check
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check README
        run: |
          if [ ! -f README.md ]; then
            echo "❌ README.md not found"
            exit 1
          fi
          echo "✅ README.md exists"

      - name: Check required docs
        run: |
          files=("CONTRIBUTING.md" "SECURITY.md")
          for file in "${files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "⚠️ $file not found"
            else
              echo "✅ $file exists"
            fi
          done

  # Dependency Check
  dependencies:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Check lock file
        run: |
          poetry check
          poetry lock --check

      - name: Audit dependencies
        run: |
          poetry export -f requirements.txt --output requirements.txt
          pip install pip-audit
          pip-audit -r requirements.txt

  # Release (only on main branch)
  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [lint-and-format, test, security, docker-build, integration, performance]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.repository == 'your-username/athena'  # Update this
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get version
        id: version
        run: |
          VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push Docker images
        if: github.repository == 'your-username/athena'  # Update this
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.dashboard
          push: true
          tags: |
            your-username/athena-dashboard:latest
            your-username/athena-dashboard:${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max